Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'---------------------------------------------------------------------------------------
' Module    : clsLogImpl
' Author    : bpo@robotparade.co.uk
' Date      : 22/11/2010
' Purpose   : The implementation of ILog that is configured by the Log manager.
'---------------------------------------------------------------------------------------
Option Explicit

Implements ILog

Private log As ILog


Private m_name As String
Private m_appenders As HashTable
Private m_level As Level

Private Sub Class_Initialize()
    Set m_appenders = New HashTable
    Set m_level = Levels.Off
End Sub

Private Sub Class_Terminate()
    m_appenders.RemoveAll
    Set m_appenders = Nothing
    Set m_level = Nothing
    Set log = Nothing
End Sub

'---------------------------------------------------------------------------------------
' Procedure : ILog_Info
' Author    : bpo@robotparade.co.uk
' Date      : 22/11/2010
' Purpose   : Logs an "Info" message to all appenders.
'---------------------------------------------------------------------------------------
'
Public Sub ILog_Info(ByVal sMessage As String, Optional ByVal ExceptionNumber As Long, Optional ByVal ExceptionDescription As String, Optional ByVal ExceptionSource As String, Optional ErrorLine As Long)
    On Error GoTo ILog_Info_Error
    If Me.ILog_IsInfoEnabled Then
        Dim key As Variant, a As IAppender, e As LoggingEvent
        Set e = BuildLoggingEvent(sMessage, Levels.Info, ExceptionNumber, ExceptionDescription, ExceptionSource, ErrorLine)
        For Each key In m_appenders.Keys
            Set a = m_appenders.Item(CStr(key))
            a.DoAppend e
        Next key
    End If

ILog_Info_Exit:
    On Error Resume Next
    Exit Sub

ILog_Info_Error:
    Select Case Err
    Case Else
        Err.Raise Err.Number, Err.Source, Err.Description, Err.HelpContext, Err.HelpContext
    End Select
    Resume ILog_Info_Exit
End Sub

'---------------------------------------------------------------------------------------
' Procedure : ILog_Dbug
' Author    : bpo@robotparade.co.uk
' Date      : 22/11/2010
' Purpose   : Logs a "Debug" message to all appenders
'---------------------------------------------------------------------------------------
'
Public Sub ILog_Dbug(ByVal sMessage As String, Optional ByVal ExceptionNumber As Long, Optional ByVal ExceptionDescription As String, Optional ByVal ExceptionSource As String, Optional ErrorLine As Long)
    On Error GoTo ILog_Dbug_Error
    If Me.ILog_IsDbugEnabled Then
        Dim key As Variant, a As IAppender, e As LoggingEvent
        Set e = BuildLoggingEvent(sMessage, Levels.Dbug, ExceptionNumber, ExceptionDescription, ExceptionSource, ErrorLine)
        For Each key In m_appenders.Keys
            Set a = m_appenders.Item(CStr(key))
            a.DoAppend e
        Next key
    End If

ILog_Dbug_Exit:
    On Error Resume Next
    Exit Sub

ILog_Dbug_Error:
    Select Case Err
    Case Else
        Err.Raise Err.Number, Err.Source, Err.Description, Err.HelpContext, Err.HelpContext
    End Select
    Resume ILog_Dbug_Exit

End Sub

'---------------------------------------------------------------------------------------
' Procedure : ILog_Warn
' Author    : bpo@robotparade.co.uk
' Date      : 22/11/2010
' Purpose   : Logs a "Warn" message to all appenders
'---------------------------------------------------------------------------------------
'
Public Sub ILog_Warn(ByVal sMessage As String, Optional ByVal ExceptionNumber As Long, Optional ByVal ExceptionDescription As String, Optional ByVal ExceptionSource As String, Optional ErrorLine As Long)
    On Error GoTo ILog_Warn_Error
    If Me.ILog_IsWarnEnabled Then
        Dim key As Variant, a As IAppender, e As LoggingEvent
        Set e = BuildLoggingEvent(sMessage, Levels.Warn, ExceptionNumber, ExceptionDescription, ExceptionSource, ErrorLine)
        For Each key In m_appenders.Keys
            Set a = m_appenders.Item(CStr(key))
            a.DoAppend e
        Next key
    End If

ILog_Warn_Exit:
    On Error Resume Next
    Exit Sub

ILog_Warn_Error:
    Select Case Err
    Case Else
        Err.Raise Err.Number, Err.Source, Err.Description, Err.HelpContext, Err.HelpContext
    End Select
    Resume ILog_Warn_Exit

End Sub

'---------------------------------------------------------------------------------------
' Procedure : ILog_Error
' Author    : bpo@robotparade.co.uk
' Date      : 22/11/2010
' Purpose   : Logs an "Error" message to all appenders
'---------------------------------------------------------------------------------------
'
Public Sub ILog_Error(ByVal sMessage As String, Optional ByVal ExceptionNumber As Long, Optional ByVal ExceptionDescription As String, Optional ByVal ExceptionSource As String, Optional ErrorLine As Long)
    On Error GoTo ILog_Error_Error
    If Me.ILog_IsErrorEnabled Then
        Dim key As Variant, a As IAppender, e As LoggingEvent
        Set e = BuildLoggingEvent(sMessage, Levels.Error, ExceptionNumber, ExceptionDescription, ExceptionSource, ErrorLine)
        For Each key In m_appenders.Keys
            Set a = m_appenders.Item(CStr(key))
            a.DoAppend e
        Next key
    End If

ILog_Error_Exit:
    On Error Resume Next
    Exit Sub

ILog_Error_Error:
    Select Case Err
    Case Else
        Err.Raise Err.Number, Err.Source, Err.Description, Err.HelpContext, Err.HelpContext
    End Select
    Resume ILog_Error_Exit
    Resume
End Sub

'---------------------------------------------------------------------------------------
' Procedure : ILog_Fatal
' Author    : bpo@robotparade.co.uk
' Date      : 22/11/2010
' Purpose   : Logs a "Fatal" message to all appenders
'---------------------------------------------------------------------------------------
'
Public Sub ILog_Fatal(ByVal sMessage As String, Optional ByVal ExceptionNumber As Long, Optional ByVal ExceptionDescription As String, Optional ByVal ExceptionSource As String, Optional ErrorLine As Long)
    On Error GoTo ILog_Fatal_Error
    If Me.ILog_IsFatalEnabled Then
        Dim key As Variant, a As IAppender, e As LoggingEvent
        Set e = BuildLoggingEvent(sMessage, Levels.Fatal, ExceptionNumber, ExceptionDescription, ExceptionSource, ErrorLine)
        For Each key In m_appenders.Keys
            Set a = m_appenders.Item(CStr(key))
            a.DoAppend e
        Next key
    End If

ILog_Fatal_Exit:
    On Error Resume Next
    Exit Sub

ILog_Fatal_Error:
    Select Case Err
    Case Else
        Err.Raise Err.Number, Err.Source, Err.Description, Err.HelpContext, Err.HelpContext
    End Select
    Resume ILog_Fatal_Exit
End Sub

'---------------------------------------------------------------------------------------
' Procedure : BuildLoggingEvent
' Author    : bpo@robotparade.co.uk
' Date      : 22/11/2010
' Purpose   : Builds a Logging Event from the message and and global data.
'---------------------------------------------------------------------------------------
'
Private Function BuildLoggingEvent(sMessage As String, oLevel As Level, Optional ExceptionNumber As Long, Optional ExceptionDescription As String, Optional ExceptionSource As String, Optional ErrorLine As Long) As LoggingEvent
    On Error GoTo BuildLoggingEvent_Error
    Set BuildLoggingEvent = New LoggingEvent
    With BuildLoggingEvent
        .LoggerName = Me.Name
        .Message = sMessage
        Set .Level = oLevel
        If ExceptionNumber <> 0 Then
            .ErrorNumber = ExceptionNumber
            .ErrorDescription = ExceptionDescription
            .ErrorSource = ExceptionSource
            .ErrorLine = ErrorLine
        End If
        .MachineName = Environ$("computername")
        .NetworkUser = Environ$("username")
        .TimeStamp = Now
        .IPAddress = fGetHostIPAddresses(.MachineName)(1)
    End With

BuildLoggingEvent_Exit:
    On Error Resume Next
    Exit Function

BuildLoggingEvent_Error:
    Select Case Err
    Case Else
        Err.Raise Err.Number, Err.Source, Err.Description, Err.HelpContext, Err.HelpContext
    End Select
    Resume BuildLoggingEvent_Exit
    Resume
End Function

Public Property Let ILog_Name(ByVal sName As String)
    m_name = sName
End Property
Public Property Get ILog_Name() As String
    ILog_Name = m_name
End Property

Public Property Let Name(sName As String)
    m_name = sName
End Property
Public Property Get Name() As String
    Name = m_name
End Property


Public Function ILog_IsInfoEnabled() As Boolean
    ILog_IsInfoEnabled = Me.Level.value <= Levels.Info.value
End Function
Public Function ILog_IsDbugEnabled() As Boolean
    ILog_IsDbugEnabled = Me.Level.value <= Levels.Dbug.value
End Function
Public Function ILog_IsErrorEnabled() As Boolean
    ILog_IsErrorEnabled = Me.Level.value <= Levels.Error.value
End Function
Public Function ILog_IsWarnEnabled() As Boolean
    ILog_IsWarnEnabled = Me.Level.value <= Levels.Warn.value
End Function
Public Function ILog_IsFatalEnabled() As Boolean
    ILog_IsFatalEnabled = Me.Level.value <= Levels.Fatal.value
End Function


Public Property Get Level() As Level
    Set Level = m_level
End Property
Public Property Set Level(ByVal oLevel As Level)
    Set m_level = oLevel
End Property

Public Sub AddAppender(ByVal appender As IAppender)
    m_appenders.Add appender.Name, appender
End Sub